
110　ALB→EC2で構成されるアプリ　EC2 複数AZのEC2AutoScaling　
　　  CPU使用率に応じてメトリクス  トランザクションデータを保存
　　  負荷増えすぎると、パフォーマンス低下。書き込みより読み込みを処理。
　　高可用性+予測不能なリクエストに対応できる→データベースを自動でスケーリングで     きる機能。



リーダー用の単一ノードでAmazonRedshiftを実施。

Amazon Redshift→AWS上で提供されているスケーラブルで高速、費用対効果が高くペタバイト規模のデータウェアハウスサービス
https://www.sunnycloud.jp/column/20230630-01/
複数並行処理を行わなければ、可用性は向上されない→よって不正解

シングルAZでAmazon Aurora→別のAZにリードレプリカ
シングルAZ構成なら障害発生する可能性あり。

マルチAZでAmazon Aurora→AuroraレプリカでAuroraAutoScalingを設定。
→マルチAZでAmazon Aurora→読み込みリクエストの方が多いので切り替えでき、
AutoScalingで可用性も向上

EC2スポットインスタンス→Amazon Elasticashe for Memcashed
EC2やdatabaseの前に配置し、読み込み速度を向上させるもの
耐久性を必要としないデータのやり取りに使用される

Amazon ElastiCacheサービス→「キャッシュ」とサービス名がついている通り、キャッシュサービスの一つ
・memcached→memory cache daemon の略でメムキャッシュディーと読みます｡
マルチスレッドで動作。CPUのコア数を上げると、パフォーマンスも上がる。
キーとバリューをシンプルな1対1で組み合わせて保存。

今回は耐久性を要求してるので不正解。

111　Windowsベースアプリ→AWSに移行→複数AZにデプロイされたEC2インスタンス接続
　　  共有Windowsファイルシステム
       
     ボリュームゲートウェイでAmazonStorageGateway 構成
　Amazon FSx For Windows file Server
　→Microsoft Windows ファイルサーバを提供するサービス→これが正解

   Amazon EFS →Windowsのインスタンスにはサポートされてない→不正解
　NFSクライアントソフトウェアのインストールと設定すれば、
　EFSを利用することによりWindowsのマウントは可能

　EBSボリュームは複数のインスタンスにアタッチできないので不正解

112　AWSで1日ごとにウェブサイト立ち上げ　24時間1つの商品のみセール対象
　　  ミリ秒のレイテンシー→毎時間数百万のリクエスト処理をできるようにしたい
　　  オーバーヘッド少なくしたい

　　  S3→すべてのウェブサイトをホストする→静的サイトに特化しているのでNG
　　  AutoScalingグループのEC2にウェブサイトをホスト
　　  →運用上オーバヘッド生じる可能性あり
  RDSにデータ保存→インスタンスのスケールアップ・スケールダウンに時間かかる可能性　　　　　　　　　　あり

Amazon Elastic Kubernetes Service （EKS）
→KubernetesをAWS上で簡単に実行できるようにした、マネージド型のサービス。
Kubernetes
→コンテナ化されたサービスやワークロードを自動的に運用・管理するための、オープンソースシステム

S3で静的ウェブサイトを処理→S3バケットをオリジンにCloudfrontで毎時間数百万のリクエストに対応　バックエンドAPIに Amazon API Gateway + Lambda関数を使用。

DynamoDBにデータ保存→高速なレスポンスを実現

113　csvファイルのバッチ処理→1時間毎にS3ファイルを保存
　　Athena→S3オブジェクトに1回限りのクエリを実行→人気商品を分析
　　クエリ失敗や時間かかることもあり
　　クエリのパフォーマンスや信頼向上のためにやること

S3のファイルを126MB未満に減らす
→128MB未満に減らすとかえって時間がかかるので不正解

S3で日付と時間帯別にデータ分割する
→データを分割して、ファイル数増やすと時間かかるので不正解

ファイルを単一オブジェクトとしてS3に保存
→単一の大きなファイルのほうが実行時間が早くなる

Amazon Kinesis Data Analytics
→リアルタイムのビデオストリームとデータストリームの収集、処理、分析
バッチ操作のクエリを実施するのに適さない

AWSGlueを使用して、csvファイルをApache Parquent 形式に変更する
→Apache Parquent 形式に変更することでAthenaのクエリ実行パフォーマンスの向上が期待できる→正解

114　スコア表示できるアプリ
　　ALB→EC2インスタンス→RDSforMySQLにデータ保存
       読み取りパフォーマンス原因で遅延・中断発生。アプリの変更を最小限にユーザの可用　　性向上

AmazonElastiCasheを使用→「キャッシュ」とサービス名がついている通り、キャッシュサービスの一つ→読み取りパフォーマンスを向上させるのに有効。
→正解

RDSPloxy→大量アクセスによるDBの負荷は抑えられるが、読み取り速度を上げることはできないので、不正解

Lambda→読み取りパフォーマンス向上にはならないので不正解。
RDS→DynamoDBに移行する→読み取りパフォーマンス向上にはつながらない、アプリケーションの変更が生じるので不正解

115　メッセージ読むアプリ+毎秒100000　ソリューションを切り離して、スケーラビリティ向上させたい

スケーラビリティ（英：scalability）
→例えば「負荷が増えたときに性能を上げるのが簡単かな？」や「使う人が増えたときに台数を増やすのが簡単かな？」のような「規模の変化に、どれくらい柔軟に対応できるかな？」のこと
https://wa3.i-3-i.info/word110379.html

amazon kinesis data analytics
→現在の名は、Amazon Managed Service for Apache Flink
→Apache Flink 向けの Amazon マネージドサービスでは、Java、Scala、Python、または SQL を使用してストリーミングデータを処理および分析できるサービス
https://docs.aws.amazon.com/ja_jp/managed-flink/latest/java/what-is.html

→メッセージ処理には適さないので不正解。

amazon kinesis data stream
データレコードの大量のストリームをリアルタイムで収集し、処理するサービス
→あらゆる規模のデータストリームを簡単にキャプチャ・処理・保存ができる
→メッセージの処理に適さないので不正解。

AutoScalingを使用したEC2インスタンスをCPUメトリックに基づきEC2数にスケーリングする
ソリューションを分離し→スケーラビリティを向上させたい

SQSサブスクリプションを使用→SNSにトピック→その後キューからのメッセージを処理。→これが正解

116　ALB+EC2+Aurora アプリを実行　障害時の復旧　30分のシステム停止・データ損失を　　許容　コスト最小限　正常に動作してる時→リクエスト処理する必要あり

プライマリ構成のインフラをセカンダリにコピー→Auroraレプリカを作成
Amazon Route 53 アクティブ・パッシブのフェイルオーバーを設定。
自動的にセカンダリのレプリカの方に切り替わる設定になってるので正解。

プライマリ構成のインフラをスケールダウンしてセカンダリにコピー→Auroraレプリカを作成
Amazon Route 53 アクティブ・パッシブのフェイルオーバーを設定。
自動的にセカンダリのレプリカの方に切り替わる設定になってるので正解。

Amazon Route 53 アクティブ・パッシブのフェイルオーバーを設定。
この設定がダウンしたときにセカンダリに切り替わる設定
→Route53がスケールダウンすると常時セカンダリのレプリカの方にリクエストが走ってしまうので不正解

プライマリ構成のインフラをセカンダリにコピー
Amazon Route 53 アクティブ・パッシブのフェイルオーバーを設定
障害発生時、最新のスナップショットからAuroraデータベースを復元
→Auroraレプリカがないので、セカンダリにデータベースが複製されない
→スナップショットからの復元は時間かかるので不正解

AWSBackupで複製→障害発生時に複製を用いて、セカンダリにインフラを復元。
Amazon Route 53 アクティブ・パッシブのフェイルオーバーを行い、新しいAuroraプライマリインスタンスを作成。
→データの復元に時間かかる→障害発生時に復元するので、データが失われるリスクある
→不正解

117　S3標準ストレージでファイルをバックアップ
　　1ヶ月頻繁アクセス→1ヶ月アクセスされない　無期限保管→コスパいい方法

S3Intelligent-Tiering→アクセス予測できるので、最適と言えず
S3Standard→S3GlacierDeepActiveに移行→正解
S3Standard→S3Standard‐低頻度アクセス→1ヶ月後のアクセスに関してはアクセスなしでいいので→不正解
S3 Standard→S3-Onezone-InfrequentAccess→1ヶ月後のアクセスに関してはアクセスなしでいいので→不正解

118　エラーページを表示したい→Route53でホストされている→ALB
　　オーバヘッド最小限に抑えたい

　Route53　アクティブ・パッシブフェイルオーバー構成+Route53のヘルスチャック異常あったらトラフィックを静的エラーページのあるS3にホストする
→正解
https://docs.aws.amazon.com/ja_jp/Route53/latest/DeveloperGuide/dns-failover-types.html

Route53レイテンシールーティングポリシー→トラフィックに静的エラーページのあるS3をレコードに追加→トラフィックが最も応答性のあるエンドポイントに送信するようにする
レイテンシー(遅延)の改善にはなる→プライマリにエラーサイトが利用できず、バックアップでエラーページを表示する方法にはならない→不正解
https://o2mamiblog.com/aws-route53-routingpolicy-beginner/#toc8

ALB＋静的エラーページをエンドでホスト+EC2上にRoute53アクティブ・アクティブ構成をとる→ALBヘルスチェックが失敗したらインスタンスにリクエストを送信するようにRoute53を設定する
→アクティブ・アクティブ構成　予備システムも常に稼働させ障害発生時の対応をスムーズにできる
→オーバーヘッド最小限の要件は満たさないので不正解。

Route53 の複数値回答ルーティングポリシーを使用。　ヘルスチェックを作成→合格したらトラフィックをWEBサイト　不合格ならトラフィックをS3にあるエラーサイトにホスト。
1つのレコードに複数のIPアドレスを登録→問い合わせきたらランダムにIPアドレスを選びルーティング→複数IPアドレスの設定でアクセスを複数リソースに分担できる
→がプライマリにエラーサイトが利用できず、バックアップでエラーページを表示する方法にはならない→不正解
https://o2mamiblog.com/aws-route53-routingpolicy-beginner/#toc8

119　　APIGateway+Lambda RESTfulAPIをデプロイ　
　　　  PDF＋JPEGのレポートアップロード Lambdaコードで医療情報(PHI)を識別したい

Pysonライブラリ→アプリケーションの運用必要→オーバーヘッド増えてしまう

Amazon Textract→スキャンしたドキュメントからテキスト、手書き文字、およびデータを自動的に抽出するサービスで、JPEG、PNG、PDF、および TIFF 形式のファイルに対して利用が可能
https://www.ctc-g.co.jp/solutions/cloud/column/article/43.html

AmazonRekognition
→強力な画像分析をアプリケーションに簡単に追加できるようにするサービス
JPEGとPNGのみサポート　PDFはサポートしてないので不正解
https://aws.amazon.com/jp/rekognition/faqs/

AmazonSageMaker
→機械学習を実施するうえで必要なトレーニングデータの前処理や作成・機械学習（ML）モデルの構築・学習・学習モデルのデプロイといった、一連のプロセスを行う機能を使えるサービス
https://business.ntt-east.co.jp/content/cloudsolution/column-500.html#section-1
→医療情報の識別には最適でないので不正解

AmazonComprehendMedical
→機械学習を使用して非構造化テキストから簡単に医療情報を抽出することが出来るサービス
https://aws.amazon.com/jp/comprehend/medical/

Amazon Textract＋AmazonComprehendMedicalがある選択肢が正解

120　AWS複数のWindowsワークロード　2つのEC2インスタンスでWindowsファイル共有　　を使用　2つのEC2インスタンス間でファイルは同期＆コピー
　　ファイルにアクセスできる方法を維持＋可用性＋耐久性に優れたソリューションがほしい

すべてのデータS3に移行→S3オブジェクトストレージ→ファイルストレージでないので不正解


Amazon S3 File Gateway →オンプレミスでの、最近アクセスされたデータに対する高速アクセスを維持しつつ、オンプレミスから AWS にファイルデータを移行し、オンプレミスファイルデータの AWS でのバックアップを行うサービス
→今回は使用してるインスタンス間でファイルデータを移行したいので不正解
S3はS3オブジェクトストレージ→ファイルストレージでないので不正解

マルチAZ　　Amazon FSx For Windows file Server
　→Microsoft Windows ファイルサーバを提供するサービス→
　　ファイルの移行を簡単にできる→これが正解

   Amazon EFS →Windowsのインスタンスにはサポートされてない→不正解
　NFSクライアントソフトウェアのインストールと設定すれば、
　EFSを利用することによりWindowsのマウントは可能
 本来はLinux向けのファイルシステムなので、最適とは言えず、不正解。

121　画像アップロードアプリ→S3に保存してる
　　SQSでキューを発行→S3イベントで通知→画像の処理結果をLambda関数で設定
　　画像ごとに複数の重複したEメールアドレスを受信してる→発生回数を減らしたい。
　　オーバーヘッドも最小限にしたい

　　RecieveMassageを30秒にSQSキューにロングポーリングを追加
　　→キューからのメッセージ取得を効率化させることできるが、
　　　Eメールメッセージの発生回数を減らすことはできない
　　https://qiita.com/taka_22/items/718ec340a710bbf5e3d0

　　SQS標準キューにFIFOキューを追加→メッセージ重複排除IDを使用し、重複IDを削除
　　→FIFOキューによりメッセージの順序と正確に1回配信を保証する
　　→重複IDを削除することによりEメールメッセージの発生を減らすことにも効果的
　　SQSの可用性タイムアウトの値を増やす
　　可視性タイムアウト
　　→SQS のキューに入ったメッセージが処理開始直後に重複して処理されないように、　　処理中の場合、一時的に他のプロセスからは、メッセージが存在していることを見えな　　いようにする設定
　　大きくすると、他のLambda関数が同じ処理をしないようにはできる
　　複数の重複したEメールメッセージを減らすことにならない　
　　SQSキューからメッセージの読み取り直後に削除できるようLambda関数を変更する
　　→メッセージの処理前に削除される可能性があり、オーバーヘッド発生の可能性あるの　　　で不正解

122  S3バケットに許可されてない構成変更を確認する方法

　　AWS Config →AWSのリソースを設定し、記録。評価・監査・審査できるフルマネージ　　　　　　　　  ドサービス。
　　　AWS Config→AWSリソースの設定を「いつ」、「だれが」、「どのように」変更し　　たのか確認したいときに使用。
       AWS Trusted Advisor→利用者のAWSアカウントを分析・評価して、ペストプラクティ　　　　　　　　　　　　 スに基づいて推薦事項を設定するサービス。
   →構成変更を設定することには繋がらないので、不正解。
 
   AWS Trusted Advisor
→AWSのベストプラクティスに基づいて、AWSリソースのコスト最適化、パフォーマン　ス、情報セキュリティ、耐障害性、サービス制限、オペレーショナルエクセレンスの6つ　のカテゴリについて、自動的に分析し、改善のための推奨事項を提供してくれるサービス
https://business.ntt-east.co.jp/content/cloudsolution/column-485.html#section-1
→構成変更を設定することには繋がらないので、不正解

123
インスタンスメタデータを作成→EventBridgeルールでLambda関数をスケジュール実行して
RDS認証情報＆ファイル内の認証情報を同時更新する
→インスタンスメタデータを取得することで、実行中のインスタンスの情報 (インスタンス ID や、AMI ID、 IP アドレス、ホスト名等) を確認することができる。
Lambda関数で認証情報を同時実行する→オーバヘッドがかかる

RDS認証情報をS3バケットに保存→EventBridgeルールでRDS認証情報＆ファイル内の認証情報を同時更新するLambda関数を実行する
S3バケットの管理＆Lambda関数で認証情報を同時実行する→オーバヘッドがかかる

データベースの認証情報を暗号化した、AWS Systems Manager Parameter Store を保存。
暗号化されたParameterの自動保存をONにする→EC2に必要なアクセス許可をロールして暗号化されたパラメータへのアクセス許可をする
→AWS Systems Manager Parameter Store の自動更新というのがそもそもないので、不正解
AWS Systems Manager の一機能である Parameter Store は､設定データ管理と機密管理のための安全な階層型ストレージを提供
https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-parameter-store.html


データベース認証情報をシークレットとして、AWS Systems Manager を使用。
シークテットの自動ローテーションをONにする→必要なアクセス許可のロールをEC2にアタッチして、シークレットのアクセスを許可。
→正解
AWS Secrets Manager とは
→様々なAWSのサービス、環境、アプリケーションに接続するためのパスワードなどの機密情報を管理するためのマネージドサービスです
自動ローテーション

https://docs.aws.amazon.com/ja_jp/mediapackage/latest/ug/iam-policy-examples-asm-secrets.html
https://docs.aws.amazon.com/ja_jp/mediapackage/latest/ug/iam-policy-examples-asm-secrets.html
https://zenn.dev/fdnsy/articles/133db8440d052f

124  オンプレOracleデータベース→AWS利用可能な最新バージョンにアップデートしたい
ディザスターリカバリーもセットアップしたい→運用上のセットアップも最小限に抑えたい
基盤オペレーションシステムへのアクセスを維持する必要あり

Oracleデータベース→EC2インスタンス移行→別のリージョンにレプリケーションをセットアップ
→EC2インスタンス移行→最小限に抑えるに反するので不正解 

Oracleデータベース→RDS for Oracle 移行→クロス自動バックアップを有効に。→別のリージョンにスナップショットを複製する
→RDS for Oracleで基盤データベースのアクセスが制限。
RDS for Oracle→ユーザーは通常のデータベース操作やアプリケーションからのクエリは可能ですが、基盤データベースへのアクセスは許可されていない。管理やメンテナンスはAWSがバックグラウンドで行う。

RDS for Oracle
→RDS for Oracleで基盤データベースのアクセスが制限。
RDS for Oracle→ユーザーは通常のデータベース操作やアプリケーションからのクエリは可能ですが、基盤データベースへのアクセスは許可されていない。管理やメンテナンスはAWSがバックグラウンドで行う。


Oracleデータベース→RDS for Oracle 移行→別のAZにスタンバイデータベースを作成。
→RDS for Oracleで基盤データベースのアクセスが制限。別AZでスタンバイDBを作成するとディザスターリカバリ実現できる→マルチazデプロイメント
https://www.ucl-group.co.jp/blog/10/post/amazon-rds-for-oracle-116

RDS Custom for Oracle
→「基盤データベースのアクセス」という概念は、通常のRDSではアクセスが制限されているデータベースの内部メタデータやシステム情報に対して、ユーザーが直接アクセスし、カスタマイズや管理ができること。
RDS for Oracleで基盤データベースのアクセスを実現。　他のAWSリージョンでリードレプリカを作成。→正解

125　EC2＋RDSでアプリケーションホスト。需要が時間帯によって異なる。　
　　  営業時間後と週末低い→最小2つ、最大5つのインスタンス　EC2AutoScalingで構成
　　　常に利用可能の状態にしたいが、コスト抑えたい。

　常に利用可能から、スポットインスタンスの選択肢が消える
　5つSavingインスタンス＋リザーブドのRDSを使用。
　Savingインスタンス負荷低いときにも定額とられるので、不正解
　
　2つのSavingインスタンス＋3つオンデマンドインスタンス＋リザーブドRDSを使用
　時間帯によって需要が変動する3つのインスタンスをオンデマンドにするのが最適
　なので正解。

126　AWSでホストされるワークロード、ハイパフォーマンスコンピューティングHPC
　　→インスタンスに、高性能ストレージ用の共有ブロックデバイスボリューム必要

　　EC2のプレイスメントグループ
　　→相互に依存するEC2インスタンスのグループをプレイスメントグループ内に作成する　　　ことで、パフォーマンスを向上させることができる。
　　https://qiita.com/zumax/items/2a53714c175c3aad87af

クラスタープレイスメントグループ
→同一の低遅延ネットワーク上にインスタンスを配置。ネットワーク遅延最小化と高いスループットを提供。
パーテイションプレイスメントグループ
→各グループを論理的に、インスタンスを複数のパーティションに分割し配置。大規模な分散アプリケーションに適している。
スプレッドプレイスメントグループ
→インスタンスを物理的に分散配置。単一のハードウェア障害が複数のインスタンスに影響を与えるリスクを低減。

AmazonEFSを使用し、インスタンス間でファイルを共有するシステムを作成。
→インスタンスに、高性能ストレージ用の共有ブロックデバイスボリューム必要なので不正解

単一のプロビジョニング済みIOPS SSD Amazon EBS ボリュームをすべてのインスタンスにアタッチ

IOPS（Input/Output Per Second）
→ハードディスクやSSDなどのストレージ（外部記憶装置）の性能指標の一つで、ある条件の元で1秒間に読み込み・書き込みできる回数のこと。
SSD（読：エスエスディー）→ハードディスクと似たようなことができるメモリ

クラスタープレイスメントグループ+単一のプロビジョニング済みIOPS SSD Amazon EBS ボリュームをすべてのインスタンスにアタッチ

127　Amazon Dynamo DB ショッピングアプリ　データ破損→目標普及時点「RPO」15分
　　目標普及時間「RTO」→1時間　にしたい

Dynamo DB グローバルテーブル→フルマネージドで、マルチリージョン、マルチアクティブなデータベースオプション
https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GlobalTables.html
世界各地、広範囲でアプリケーションの可用性とパフォーマンスを確保できる。
→障害対応には、適していないので不正解。

Dynamo DB ポイントタイムリカバリ
→有効にすることで、35日前~5分前の時点のテーブル内容を復元できる機能。
https://blog.serverworks.co.jp/dynamodb-pitr
https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Introduction.htm
お客様のテーブル復元の 95% が 1 時間未満で完了している
https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/CreateBackup.html#CreateBackup_HowItWorks-restore

データをS3Glacierに保存。RTOをS3Glacierから復元。
S3Glacier→標準だとデータの取り出しに3-5時間かかる
AmazonEBSスナップショットを15分ごとにスケジュールする
→DynamoDBサーバレスのサービス　EBSのテーブルはない→不正解

128　さまざまなデータベースから取得したバッチ+ネットワークセンサー・APIからデータを生成　データを1つの場所に統合→S3にステージング　1回のクエリ実行→KPI表示

Athenaの1回限りのクエリを実行→Amazon Quick Sight 使用→KPIのダッシュボードを作成
Amazon Athena 
→標準的な SQL を使用して Amazon Simple Storage Service (Amazon S3) 内のデータを直接分析することを容易にするインタラクティブなクエリサービス
https://docs.aws.amazon.com/ja_jp/athena/latest/ug/what-is.html

QuickSightはAWSで簡単に分析環境を作ることができるBIサービス
https://www.sunnycloud.jp/column/20210930-01/
クラウド向けに構築された、スケーラブルでサーバーレスな、組み込み可能性の高いセルフサービスBI
https://www.zdh.co.jp/bi-online/bidemo-quicksight/#id01-1
https://docs.aws.amazon.com/ja_jp/athena/latest/ug/columnar-storage.html

 Amazon Kinesis Data Analytics 
→Apacheflinkを使用してストリーミングデータをリアルタイムで変換・分析できるサービス→ストリーミングデータだけでなく、バッチデータも扱うので不正解
https://dev.classmethod.jp/articles/first-time-kinesis-data-analytics/

Lambda関数+Redshift 
Amazon Redshiftとは、AWS上で提供されているスケーラブルで高速、費用対効果が高くペタバイト規模のデータウェアハウスサービス
→Lambda関数で1回・1回送るのは不適切。

Glue→JSON形式→AmazonOpensearchServiceクラスターにロード
Amazon OpenSearch Service
→様々なデータ保存サービスと統合され、それらのデータを効果的に検索および分析
簡単なログ分析・アプリケーションのモニタリング・ウェブ検索に利用。
BIツールでないので、不正解。

Lakeformationのブループリントデータレイクに取り込み可能データを特定。Glueをソースをクロールし抽出→S3にApache Parquetデータをロード
Lakeformation
→AWSでデータレイクを構築・運用するためのマネージドサービス
https://qiita.com/sot528/items/8a4c3adf9ba5c2da3fa9
https://docs.aws.amazon.com/ja_jp/lake-formation/latest/dg/workflows-about.html

データレイク（英：data lake）
→いろいろな形式のデータを、そのままの形でポイポイ放り込んでおけるデータ置き場
https://wa3.i-3-i.info/word18732.html

クロール（英：crawl）
→インターネットの世界を徘徊して、ホームページの情報を集めてまわること
https://wa3.i-3-i.info/word11611.html

S3にApache Parquet
Apache Parquet →効率的なデータの保存と検索のために設計された、オープンソースの列指向データファイル形式
https://www.databricks.com/jp/glossary/what-is-parquet
https://qiita.com/TaigoKuriyama/items/cedcc9436f4456191601

129　WEBアプリケーション構築→APIGatewayRestAPI処理→注文順に処理
APIGateway統合+AmazonSNSにメッセージ+Lambda
→注文の受信順に処理されることに反するので不正解。

APIGateway統合+AmazonSNSにメッセージ+LambdaでFiFOキュー
→注文の受信順に処理されることになるので正解。

Gatewayオーソライザー+アプリケーションの注文処理してる間、リクエストをブロック
→注文処理してる間ブロックしたら、注文してる間の注文が処理されないので誤り。
https://qiita.com/y-dobashi/items/b64ca7c486aabc2c14aa

APIGateway統合+AmazonSNSにメッセージ+Lambdaで標準キュー
→注文の受信順に処理されることに反するので不正解。

130　オンプレのMySQLのデータベースアプリ→耐障害性+利用可能性向上
　　　AWSへ移行→本番データベースからデータをすべてエクスポート
　　　ステージング環境のデータベースを構築。
　　　AWS移行中→ステージング環境のデータベース使用不可。開発の遅延発生
　　　ステージング環境のデータベースをソリューションを提供。移動作業でも開発。
　　
　　AuroraMysqlを使用、マルチAZのAuroraレプリカ+mysqldumpユーティリティで復元・　　プロセスを利用してインポート
　　→mysqldumpユーティリティを使うと、遅延発生する可能性あり
　　https://www.sejuku.net/blog/82770
　　
　　AuroraMysqlを使用、マルチAZのAuroraレプリカ+データベースのクローン機能でオン　　デマンドでステージング環境にデータベースを作成。
　　→データベースのクローン機能で、本番と同じデータベースを素早く準備できる

　　マルチAZのRDS+リードレプリカ+スタンバイインスタンス
　　→スタンバイインスタンスは、本来プライマリインスタンスが利用できなくなったとき　　　自動的に切り替わるもの→障害発生時の被害の軽減には役立つが、ステージングの用途には適さない

ステージング環境
→できるだけ実際に使うときの状況（本番環境）に似せて作った動作確認用の場所（テスト環境）のこと

スタンバイインスタンス
プライマリDBインスタンスに何らかの障害やメンテナンスが発生した場合、RDSは自動的にトラフィックをスタンバイDBインスタンスにフェイルオーバーさせます。これにより、アプリケーションのダウンタイムを最小限に抑えることができる。
フェイルオーバーが発生すると、DBの接続先を示すDNSレコードがスタンバイDBインスタンスを指すように更新される。

マルチAZのRDS+mysqldumpユーティリティで復元・プロセスを利用してインポート
→mysqldumpユーティリティを使うと、遅延発生する可能性あり
　　https://www.sejuku.net/blog/82770

131　多層WEBアプリケーション　アプリはコンテナ化→PostgreSQLデータベースで実行
　　 インフラとキャパシティ運用のオーバヘッド成長妨げてる
　　 PosgreデータベースをAuroraデータベースに移行
　　→既存のアプリケーションとツールを変更することなく実行可能。スケーリングでデー　　　タベースのボリュームを自動拡張→最大90％コスト削減できる→正解
　　EC2にアプリをホスト→オーバヘッドするので不適切
　　Cloudfrontにセットアップする
　　→コンテナ化されたPosgreアプリの実行を助ける施策になってないので不正解
　　WEBアプリとPosgreの間にElasticasheをセットアップ
　　→キャッシュと呼ばれる一時保存領域に保存することで、データのやり取りを高速で行　　　えるサービス→不正解
　　アプリをAmazonECSのFargateに移行。
　　→Fargateはサーバレスでコンテナを実行するサービス→ECSはコンテナ化されたアプリを簡単にデプロイ・管理・スケーリングできるサービス。→正解

Amazon ECS(以下ECSとします。)はDockerコンテナを簡単に実行、停止、管理できる   サービス
      https://business.ntt-east.co.jp/content/cloudsolution/column-try-37.html


132　ピーク時の自動車の位置を追跡するアプリ→リアルタイムでのデータ取得が求められ　　る　既存のデータ分析使用　RestAPIからのアクセスが必要

S3+Athena→S3は静的サイトの保存に適してる→リアルタイムのデータ取得求められるので不正解

Lambda+APIGateway→
Lambda→サーバレスでアプリやコード実行できるサービス　
APIGateway→API通して他のAWSサービスと連携し、WebAPIの集中管理を行うサービス
リアルタイムでのデータ取得ができないので不正解。

Redshift+QuickSight
Redshift
→AWS上で提供されているスケーラブルで高速、費用対効果が高くペタバイト規模のデータウェアハウスサービス
→Amazon QuickSight は、クラウド規模のビジネスインテリジェンス (BI) サービス

Amazon kinesis data analytics「Amazon Managed Service for Apache Flink 」 + APIGateway
→Amazon Managed Service for Apache Flink により、Apache Flink を使用してリアルタイムストリーム処理アプリケーションを簡単に構築して実行
Apache Flink→分散処理フレームワークであり、特にリアルタイムのデータストリーミングとバッチ処理の両方に対応しています。Flinkは、高スループットと低レイテンシを実現するように設計されており、大規模なデータ処理やリアルタイムのデータ分析に最適
　　
→正解

133　分散アプリケーションをAWSに移行　ワークロードは様々　移行後プラットフォーム　　プライマリサーバの試用版→コンピューティングノード間でジョブ調整
　　回復力とスケーラビリティを最大化させたい

スケールイン（英：scale in）
→「今までは2台のコンピュータで処理させていたけど、1台に減らそうか」のように、お仕事をするやつの台数を減らすことで全体の性能を下げるやり方

スケールアウト（英：scale out）
→「今までは1台のコンピュータで処理させていたけど、2台に増やそうか」のように、お仕事をするやつの台数を増やすことで全体の性能を上げるやり方

SQSでキューを設定→AutoScalingのEC2インスタンス→スケジュールされたスケーリングにAutoScalingのEC2インスタンス
→問題にはスケジュールに関する記述なし→いつスケールアウトするかわからないので不正解

SQSでキューを設定→AutoScalingのEC2インスタンス→キューのサイズに応じてAutoScalingのEC2インスタンス

分散アプリケーションの効率化→SQSのキュー処理が有効
キュー→先に入れたものが先に出る構造になっている何か

キューのサイズに応じて、スケールアウトすることによりジョブを効率よく処理することができる
キューのサイズが小さければスケールインすることによりリソースを効率よく使うことができる

AutoScalingグループでのEC2インスタンス→プライマリサーバとコンピューティングを実装→ジョブの送信先にcloudtrailを実装
cloudtrail→監査・セキュリティモニタリング・運用上のトラブルシューティングを解決するサービス→設定してもログ分析のみアプリケーションの回復・スケーラビリティの向上にならないので不正解。
「AWS CloudTrail」
→アカウント内でおこなわれるすべてのアクティビティを記録・監視するためのサービスです。デフォルトの状態で「ON」になっており、過去90日間の履歴が保存されます。
https://dx.nid.co.jp/column/what-is-aws-cloudtrail

AutoScalingグループでのEC2インスタンス→プライマリサーバとコンピューティングを実装→ジョブの送信先にeventbridgeを実装
eventbridge
→コードを記述せずにAWSのサービス・独自のアプリ・SaaSのアプリのデータを変更でき　るサービス
データの変更のあとに回復力・スケーラビリティを向上のアクションがないので不正解

134　Webサイトのホストに最も費用対効果が高いもの→HTML・CSS・クライアント側のJavaScript・画像で構成

Webサイト→動的コンテンツがないと判断→静的コンテンツを扱うサービスでも可能

コンテナでFargate→コンテナ化・データベースの転送・タスク数・リソースの実行時間などにお金かかる
https://www.sunnycloud.jp/column/20230303-01/

S3バケット
→1つのサービスで完結できるので安価で済む
https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/WebsiteHosting.html

EC2インスタンス
→稼働時間にお金かかる→費用対効果悪い

Express Node.js のフレームワーク使用　Lambda＋ALB　箇条な構成→費用対効果が最も高いと言えず不正解。

135　EC2インスタンスバッチアプリケーション　RDSのバックエンドで構成
　　  データベース上で非常に大きな読み込みも発生してる
　　  高可用性＋データベースの読み込み回数の減少も必要。

RDSリードレプリカ→障害発生時の可用性向上につながるが読み込み回数の向上につながらないので不正解。

Elasticashe for Redis→RDSの前にキャッシュという一時保存領域を設け、読み込みスピードを上げる
→Memcashedと比べ、複雑なデータタイプに対応。計算が複雑・同時にこなせる
　高可用性・高耐久性を維持できる


Elasticashe for Memcashed→複数のCPUで処理できるのでパフォーマンス向上ができる
シンプルなデータ構造のみ利用可能。

Route53DNS キャッシング
→DNSクエリのパフォーマンス向上→データベースの読み取り向上を変えるものではない

136　アプリはLinuxカーネルで実行　UDPのみサポート
　　待ち時間最も短く、トラフィックが最も近いエッジロケーションにルーティング。
　　アプリケーションエンドポイントへのエントリ用の静的IPアドレスを提供。

　　
UDP・TCPサポートはNLB　HTTP/HTTPSはALB　NLBついてるので2択

Cloudfront→CDNサービス　コンテンツを可用性高く、遅延なく配信するサービス

AWS Global Accelerator（Global Accelerator）
→ネットワークパフォーマンスを最適化するサービスです。インターネットのトラフィックをAWSが保有するグローバルネットワークを通じて効率的にルーティングすることで、通信のレイテンシーの改善や、アプリケーションの保護などが可能とする

137　S3にデータを保存する必要あり→データ変更されないようにする
　S3に発生した新しいオブジェクト→会社変更可能というまで、不特定の期間は変更不可
　AWSアカウントの特定ユーザーのみ削除できる。

　S3Glacierボール卜を作成するオブジェクトにWORM write-once read-manyボール卜ロックポリシーを追加する
Amazon S3 Glacier のボールト 
→S3 Glacierのデータモデルの主要概念の内の一つで、アーカイブを格納するコンテナ
https://qiita.com/miyuki_samitani/items/2896d28eb3378a20513b

オブジェクトロック有効にS3バケット→バージョニング有効に保証期間を100年にする
新しいオブジェクトのデフォルトの保持モードをガバナンスモードにする
→保証期間100年が会社変更可能と言うまで不特定の期間は変更不可を満たさないので不可
ガバナンスモードで特定の人を追加すると、会社変更可能時に変更が可能になるが、設定してないので不可。

S3バケット作成。Cloudtrailを作成、オブジェクトの変更を追跡するS3APIイベントを追加会社が変更されたバックアップをリストアする」

CloudTrail→AWS のサービス の運用とリスクの監査、ガバナンス、コンプライアンスを可能にするのに役立つサービス

これなら、オブジェクト変更の度にデータを復元する意味になり、不正解。
S3オブジェクトは常に変更できてしまうので不正解

S3オブジェクトロックを使用。バージョニング有効。リーガルホールドをオブジェクトに追加。オブジェクトの削除が必要なユーザーのIAMポリシーにs3PutObjectLegalHoldを追加する。
→ロックの無効化で変更が可能になる
https://dev.classmethod.jp/articles/retentionmode-and-legalhold/

138　AWS上でワークロード実施　単一のAWSリージョンでワークロード
　　　ディザスカバリ戦略を考案　最小限のレイテンシー　DBの最新にして
　　残りのインフラはキャパシティを減らして実行。必要に応じてスケールアップ可能にし　　たい 
　
パイロットライトデプロイ
→DR 用にスペックの低い DB を起動しておいて、通常時はデータの同期のみを行います。障害発生時には、 DR 用のリージョンでアプリケーションを起動し、 DB のスペックを上げて対応します。そして元のリージョンの復旧作業を行う
障害発生時に起動しますよがポイント。

ウォームスタンバイデプロイ 
→DR 用のリージョンで、スペックのみ低い同構成でシステムを常時起動しておきます。障害発生時にはアプリケーションおよび DB のスケールアップ、 Route 53 で DNS を切り替えて対応します。そして元のリージョンの復旧作業を行う。
常時起動→障害発生時スケールアップするよという構成。
https://michimani.net/post/aws-architecture-for-disaster-recovery/


Auroraグローバルデータベース　
RDSのマルチAZ
→同一リージョン内での構成なので　問題のさまざまなリージョンに対応できないので不正解。

→ウォームスタンバイ＋Auroraグローバルデータベース

139　オンプレデータベース→AWSに移行
　　NFSベースのファイルを保存するSFTPサーバをホスト
　　SFTP（読：エスエフティーピー）→ファイルを送受信するための仕組みのひと
　　200GBのデータをEFSシステムを使うEC2インスタンスにホストする必要あり
　　
　　EFSを起動→EC2と同じAZにマウントターゲットを作成する→正解
　　オンプレデータセンターにAWS Data Syncをインストール
　　200GBなら送るのに適してるので正解。


AWS DataSync
→オンプレミスからAWS（Amazon S3 / Amazon EFS）へ、AWS（Amazon S3 / Amazon EFS）からオンプレミスへ、データの移動を簡単におこなえるマネージド型のデータ転送サービス→双方向データの移動を行うことができるサービス

データ用に2つ目のEBSボリュームを作成する
→EFSファイルシステムをデータ用に使用するEC2インスタンスにホストしたいとあるので
　不正解。
オペレーションシステムのコピーコマンドを手動で実行して、EC2インスタンスにプッシュ
→コピーコマンドを手動で→自動で行うに反するので不正解
AWS DataSync→オンプレミスSFTPサーバ向けにロケーション設定を作成
AWSからオンプレミスにデータを移動することになり設問と逆の趣旨になるので
不正解。

140　 オンプレPostgreをAuroraPostgreに移動させたい
　　　オンプレは移行中でもアクセス可能状態にしたい　
　　　Auroraデータベースはオンプレデータベースと同期を維持させる必要あり
　

継続的なレプリケーションのタスクを作成する
→これはAmazonDMSで行うことができる→これにより、アクセス可能状態を維持させながら、同期を行うことができる

AWS DMS レプリケーションサーバーを作成する
Amazon Database Migration Service (DMS)→AWS（Amazon Web Services）が提供するクラウドベースのデータベース移行サービスです。このサービスを利用することで、オンプレミスやクラウド内のデータベースを他の場所に移行する際の手間と時間を大幅に削減できる

オンプレデータのバックアップを作成。
→バックアップ作成のみだと、アクセス可能状態で、同期をさせることができない
→一般的にデータベースの更新行われると、更新の度にバックアップを実施する必要あり、常にアクセス可能な状態を維持しながら、同期するという要件を満たせないので誤り。

AWS SCT→データベーススキーマを変更することができる
スキーマ（英：schema）→何かの「構造」を指す用語。
構造を変更したところで、常にアクセス可能な状態を維持しながら、同期するという要件を満たせないので誤り。

データベースの同期を監視するためのEventBridgeを作成。
→EventBridgeを作成するだけでは、常にアクセス可能な状態で同期が行えないので誤り。

141　ALBの背後で実行されているアプリをAWSにデプロイ
　　外部認証局「CA」によってSSL/TLS証明書を使用し、エッジを暗号化する必要あり
　　証明書の有効期限切れる前に、証明書をローテーションさせる必要あり
　　https://www.digicert.com/jp/blog/what-is-a-certificate-authority

　　ACMが発行したSSL証明書でない必要あり
　　→今回は、ACMを使用してSSL/TLS証明書をインポートする→証明書をALBにイン　　　ポートする　ACMが発行した証明書ではないので手動ローテションが必要。
　　
　　AWS Certificate Manager 
　　→AWS ウェブサイトとアプリケーションを保護する　パブリックおよびプライベート 　　SSL/TLS X.509 証明書とキーの作成、保存、更新の複雑さを処理

      （ACM) Private Certificate Authority
      →プライベートの証明書を発行する機能→パブリックで使用するWEBアプリケーション　　  の使用ではパブリック証明書の発行が必要。
　　https://dev.classmethod.jp/articles/tried-acm-private-certificate-authority/

　　
142　セキュリティグループ

パプリックサブネットはオンプレから社内インターネット接続とあるので、
踏み台ホストのsgはインバウンドの社内IPの許可にする

プライベートサブネットにあるアプリケーションを起動しているEC2
EC2のsgはプライベートサブネットに接続するのでプライベートIPアドレスからのSSH接続を許可する

143　S3で静的WEBサイトをホストしていてDNSにRoute53を使用。
　　  需要高まっているので、ユーザの待ち時間短縮する必要あり。
　　  最も費用対効果が高い方法は？

　　 S3バケットすべてAWSリージョンに複製→Route53ジオロケーションルーティング
　　→S3バケットすべてをAWSリージョンに複製するのに費用かかるので不適切。
　　別名:位置情報ルーティングポリシーは、ユーザーの位置情報に基づいてルーティング　　　　するポリシー

　　GlobalAcceleratorでアクセラレーターをプロビジョニング→提供されたIPアドレスを　　　S3に→Route53エントリに登録し、アクセラレータのIPアドレスに向かうようにする
　　AWS Global Accelerator 
　　→ALB、NLB、EC2の前段に置いてアプリケーションの可用性とパフォーマンスを改善　　　するサービス。
　　S3の静的ウェブサイトの距離は最適になるが、費用対効果が最適でないので不適切。
　　https://qiita.com/miyuki_samitani/items/9a320888a833b4aed08c

　　S3 Transfer Acceleration 
　　→海外リージョンなど、送信元から遠く離れたS3へのデータ転送をAWSのエッジロ　　　ケーションとネットワークプロトコルの最適で高速化するサービス。

　　世界中からの大量アクセスに対応していないので、不適切。

144　オンプレで10TBのJSONファイルのデータをS3に送信したい　
　　  送信後リアルタイム分析を提供するいくつかの重要な追加システムからのアクセスも　　　あり→つまり双方の通信が必要。
　　機密データなので、安全に転送する必要あり。→インターネットはだめ

AWS DataSync
→オンプレミスからAWS（Amazon S3 / Amazon EFS）へ、AWS（Amazon S3 / Amazon EFS）からオンプレミスへ、データの移動を簡単におこなえるマネージド型のデータ転送サービス→双方向データの移動を行うことができるサービス

AWS Database Migration Service (AWS DMS) 
→リレーショナルデータベース、データウェアハウス、NoSQL データベース、その他の種類のデータストアを移行できるようにするクラウドサービスです。AWS DMS を使用して、データの AWS クラウド への移行や、クラウドとオンプレミスセットアップを組み合わせたものの間でのデータ移行できるサービス。
→S3の転送には対応してないので不正解。

145　出荷統計をRESTAPIで抽出するアプリケーション開発
　　  HTML形式にして、毎朝同時に複数のEメールアドレスに送信する必要あり

Amazon Data Firehose
→リアルタイムのストリーミングデータをS3やRedShift、Elasticsearchなどのデータストア、分析ツールに配信することができるマネージドサービス
今回は、朝1回取得し、Eメールで送信するのみなので用途が適さないので不正解。

AmazonSESを使用し、レポートをEmailに送信
→趣旨を満たすので、正解。

Glueジョブ→APIにクエリするEventBridgeのスケジュールイベントを作成。
AWS Glue 
→分析を行うユーザーが複数のソースからのデータを簡単に検出、準備、移動、統合できるようにするサーバーレスのデータ統合サービス
RESTAPIからデータを取得し、Emailで送信する必要ある要件を満たさないので不正解。

Lambda関数→APIにクエリするEventBridgeのスケジュールイベントを作成
Lambda関数で毎朝APIにクエリするEventBridgeのスケジュールイベントを作成できるのでこれが正解。

データをS3に保存。S3イベント送信先として、Eメールでレポート作成するSNSトピックを作成。
出荷統計を毎朝取得できないので、不正解。

146　S3にバックアップする大量データを生成するアプリケーションあり
　　アプリが成長し、インターネット帯域幅の制限に苦情　
　　S3へのタイムリーなバックアップ＆最小限に抑える長期的なソリューションが必要。
　　
　　VPN接続を確認→VPCゲートウェイポイントを介して、すべてのトラフィックを
　　　　　　　　　　プロキシする
　　VPN接続は、AWSが提供しているインターネットを通じた仮想的なプライベートネッ　　トワークを使ったサービス
　　AWS VPN
　　→オンプレミス環境（企業などの拠点やパソコンなどの端末）とAWS VPC（Virtual 　　　　Private Cloud）の間で安全なVPN接続を確立できるサービス
　　設問はインターネット帯域幅の制限に苦情なのでインターネット使うサービスは
　　今回は不正解。
　
　　DirectConnect 接続を確立
　　→新しい接続を介して、バックアップトラフィックを転送する
　　インターネット使わず、互いがプライベートIPアドレスで通信できる
　　セキュリティが高く、スループットも安定している
　　「AWS Direct Connect」
        →AWSとのプライベート接続を確立することができ、安定した通信速度やセキュリ　　　　ティ強度の高い環境でネットワークサービスを利用
　　
　　Snowballデバイスを毎日注文→Snowballデバイスをロードし、デバイスをAWSに返却　　する
　　→Snowball Edge Storage Optimizedとは、オンプレミス環境からAWSへ最大80TBの　　　　データ移行を1台で行えるデバイス
　　https://www.altius-link.com/recruit/its/blog/technology/20221202_001723.html

　　マネジメントコンソールからサポートチケットを送信
　　→S3サービス制限の緩和をリクエストする
　　S3サービスを緩和しても、インターネット帯域幅の問題を解決することはできない　　　→不正解。

147 米国の複数地域でS3にデータ保存　現在データ量3TB→今後増える可能性大
　　マーケティング会社とデータ共有したいが、転送費用を抑えたい
　　S3バケットでリクエスター支払い機能を有効にする
　　リクエスター支払い機能
　　→Amazon S3 のバケットのストレージおよびデータ転送にかかるコストはすべて、そ　　　のバケット所有者が負担します

　　リサーチ会社とマーケティング会社のS3バケット間でクロスリージョンレプリケー　　　ションを設定する。
　　→クロスレプリケーションを設定しても転送費用は抑えられない。
　　データの異なる地域のS3バケット間で自動的にレプリケートする機能。

　　レプリケーションをAWSのリージョンを跨いで別のバケットにリアルタイムでオブ　　　ジェクトをコピーしておく設定
　　　https://qiita.com/k_dd/items/7968dc30b9a4429061c4

　　マーケティング会社がリサーチ会社のバケットにアクセスできるようにS3クロスアカ　　ウントを作成
　　→アクセスできるようになるが、S3のデータ転送費用を抑えることにならないので
　　　不正解
　　一部の AWS サービスでは、IAM を使用してリソースへのクロスアカウントアクセスを　　許可
　　　　https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/access_policies-cross-account-resource-access.html

S3バケット→intellgent-Tieringを設定→クロスリージョンレプリケーション→マーケティング会社のS3バケットと同期
→S3バケット転送費用を軽減することにならないので不正解。

148　動的WEBサイト構築→サーバのメンテナンス・パッチ適用を最小限にしたい
　　  高可用性で、ユーザーの需要変化に対応するために、読み込み・書き込み容量を可能　　  な限りスケーリングする必要あり。
  
　　→S3に静的コンテンツ＋APIGateway＆Lambdaで動的コンテンツをホスト
　　　データベースとして、オンデマンドキャパシティのDynamoDBを使用。
　　　ウェブサイトのコンテンツを配信するためのCloudFront
　　→正解！

　→S3に静的コンテンツ＋APIGateway＆Lambdaで動的コンテンツをホスト
　　　データベースとして、Auto Scaling AmazonAuroraを使用。
　　　ウェブサイトのコンテンツを配信するためのCloudFront
 →AutoScalingのAuroraでは、リードレプリカの数をスケーリングすることはサポートされているが、容量を上げることはサポートされていない
→不正解

EC2にホスト→AutoScalingでEC2をスケーリング→ALB→書き込みのDynamoDBで構成。
EC2はサーバのメンテナンス＋バッチ適用がユーザの責任になるので最小限にならないので
→不正解

EC2にホスト→AutoScalingでEC2をスケーリング→ALB→AuroraAutoScalingでAmazonAuroraで構成
EC2はサーバのメンテナンス＋バッチ適用がユーザの責任になるので最小限にならないので
→不正解
 →AutoScalingのAuroraでは、リードレプリカの数をスケーリングすることはサポートされているが、容量を上げることはサポートされていない

149　ウェブサイトで検索可能なレポジトリ→中身1000万行を含むRDSforMySQL
        2TBの汎用SSDストレージ→毎日数百万件の更新が行われている
　　1部の挿入操作に10秒以上かかっていることに気づく
　　データベースのストレージが問題

　　ストレージタイプをプロビジョンドIOPS SSDに変更
　　→正解

　　DBインスタンスをメモリ最適化インスタンスクラスに変更
　　→データベースのストレージの問題なのでメモリを最適化しても解決にならず不正解
　　メモリ（英：memory）
　　→CPUさんが直接読み書きできる記憶装置のこと
　　https://wa3.i-3-i.info/word182.html

　　ストレージ（英：storage）→ハードディスクとかDVDとかUSBメモリとかのデータを　　　　　　　　　　　　　　　しまっておく箱。
　　https://wa3.i-3-i.info/word11464.html

　　DBインスタンスをバースト可能なパフォーマンスインスタンスクラスに変更
　　→パフォーマンスインスタンスクラスはベースラインを超えるCPU性能を発揮する　　　　が、ストレージパフォーマンスの改善には繋がらないので不正解。
　　バースト（英：burst）
　　→短期間に集中的に、わ～っ！って何かをする（何かが起きる）こと

https://zenn.dev/matsu7089/articles/meaning-of-ec2-instance-types　　https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/burstable-performance-instances.html

　　CPU（読：シーピーユー）
　　→実際に計算したり、あれやこれやの処理を実行するのが仕事のやつ
　　https://wa3.i-3-i.info/word183.html

MySQLネイティブの非同期レプリケーションでマルチAZRDSリードレプリカを有効
データベースのストレージのパフォーマンスを上げるのが満たさず不正解。

150　EC2からS3にデータ移動する必要あり
　　API呼び出し・パブリックインターネットを通して、ルーティングされない必要あり
　　S3バケットにアクセスすることができるのは、EC2インスタンスのみ

EC2のあるAZにS3のインターフェイス型のVPCエンドポイントを作成
適切なセキュリティグループをエンドポイントにアタッチする。リソースポリシーをS3にアタッチして、EC2のIAMロールにのみにアクセス許可。
→サブネットよりAZに配置したほうが安全性が確保されるので正解。

EC2のあるサブネットにS3のインターフェイス型のVPCエンドポイントを作成
リソースポリシーをS3にアタッチして、EC2のIAMロールにのみにアクセス許可
→EC2に配置されているサブネットに配置する必要がないので、不正解

EC2インスタンス内からnslookupコマンドを実行→S3バケットのサービスAPIエンドポイントのプライベートIPアクセスを取得→VPCルートテーブルにルートを作成→EC2インスタンスからS3にアクセス許可→リソースポリシーをS3にアタッチして、EC2インスタンスのIAMロールのみにアクセスを許可する。
→IPアドレスより、VPCエンドポイント使用したほうが適切なので、条件は満たすが、不正解
nslookupコマンド
→IPアドレスからドメイン名を確認すること、ドメイン名からIPアドレスを確認することができるコマンド
https://www.winserver.ne.jp/column/about_nslookup/

AWSが提供するip-ranges.json範囲を使用して、
→S3バケットのサービスAPIエンドポイントのプライベートIPアクセスを取得→VPCルートテーブルにルートを作成→EC2インスタンスからS3にアクセス許可→リソースポリシーをS3にアタッチして、EC2インスタンスのIAMロールのみにアクセスを許可する。
→IPアドレスより、VPCエンドポイント使用したほうが適切なので、条件は満たすが、不正解

ip-ranges.json→
https://dev.classmethod.jp/articles/tsnote-ip-ranges-json-001/

　　
151 AWSでホストしてるアプリELBをACMにインポートされた証明書を使用
　　30日前に証明書の有効期限の通知を受け取りたい

　　ACMにルールを追加することはできない→サーバー証明書のAWS自身が認証局となっ　　　　　　　　　　　　　　　　　　　　　て発行するサービスなので

　　AmazonSNSにACMがSSL証明書を発行しました！というルールを追加することができ　　ないので不正解

　　AWS Trusted Adviser→30日前に切れるSSL証明書がないかチャックする
    AWS Trusted Advisor　信頼されたアドバイザーが分析してくれるイメージ
    →AWSアカウントの最適化、セキュリティ、コスト削減に役立つツール

   Amazon Eventbridge で分析できる30日後にSSL証明書が切れる通知はできない
順番が違う→Lambda関数→SNSアラート→このイベントをEventBridgeルールとして追加するならできる

30日後にきれる証明書がないかを検知するAWSConfigルールを検出
→AmazonSNSに通知がくるようにアラート→ Amazon Eventbridgeにルールを設定。

152　APIGateway us-east-1&ap-southeast-2 リージョンRestAPI設計
　　RestAPI
　　SQLインジェクション&クロスサイトスクリプティング守りたい
      最小限の管理作業

SQLインジェクション攻撃（読：エスキューエルインジェクションコウゲキ、シークェルインジェクションコウゲキ　英：SQL injection attack）
→穴埋めになっているSQL文の穴埋め部分に作った人が意図しない内容を入れることによって、おかしな動きをさせること
https://wa3.i-3-i.info/word110550.html

クロスサイトスクリプティング（XSS）（英：cross site scripting）
→悪い人がホームページにイタズラする→そのイタズラされたホームページを訪問者が見る被害に遭う、という流れの攻撃のこと。あるいは、それが可能になっている状態。　　
https://wa3.i-3-i.info/word11764.html

AWSWAFかAWSSheild 
AWS WAF
→AWS（Amazon Web Services）が提供するWAFです。WAFとは、Webアプリケーションの脆弱性を突く攻撃の防御に特化するセキュリティサービス。

各リージョンでAWSWAFをセットアップ。リージョンごとにネットワークACLをAPIステージに関連付ける。
→各リージョンで設定しないといけないので最小限の管理作業に反する。

両方のリージョンにAWSSheildを設定。リージョンごとにネットワークACLをAPIステージに関連付ける。
１つのリージョンにAWSSheildを設定。リージョンごとにネットワークACLをAPIステージに関連付ける。
AWSSheildはDdos攻撃を防げるが、SQLインジェクション&クロスサイトスクリプティングには対応してないので不正解。

両方のリージョンでAWSFirewallManagerをセットアップ。AWSWAFルールを一元的に設定。
AWS Firewall Manager 
→一元的にfirewallのルールを設定・管理するセキュリティ管理サービス
https://qiita.com/miyuki_samitani/items/978582fe5e9feb73d6e5

153　データ収集のためアプリがSaaSと統合
　　　EC2データ受信→S3に画像保存　画像アップロードしたらユーザに通知
　　　パフォーマンス遅い→改善したい　オーバーヘッドは最も少なくしたい

　EC2Autoscalingグループ　S3画像アップロード完了→SNSに通知が行くようにする
　→EC2可用性は向上できるがアップロード速度は向上できない

　S3バケットターゲットのEventbridgeルール→S3バケットにアップロードされたときのEventbridgeルールを設定→3バケットにアップロードされたときのEventbridgeルールターゲットにSNSトピックで通知
→Eventbridgeルールは通知はできるがアップロード速度は向上できない

Docker+AmazonECS→cloudwatch container insightsをターゲットにSNSで通知
→Docker+AmazonECSの変更が運用上のオーバヘッドがかかるので不正解

AmazonAppFlowを作成→SaasソースとS3にデータ転送する
S3に画像アップロード完了時にSNSに通知がいくようにする
AmazonAppFlow
→SaaSプラットフォームとAWSサービス間でデータを転送できるようにするフルマネージド統合サービス→正解

154　50TBのデータオンプレ→AWSに移行したい
　　毎週データ変更ジョブを実施　データ転送完了アプリ一時停止→早く転送プロセス開始したい　追加で使用できるネットワーク帯域幅がない
データ転送+AWSでジョブを実行し続けたい

AWS DataSync→大容量のデータ移動における様々な課題を解決し、安全かつ高速なデータ移動を実現できるサービス　インターネットを使用するので不正解AWS Snowballとは
AWS Snow Family 
→物理ストレージデバイスを使用してS3に大量のデータを打ち上げるためのデバイス
変換アプリケーション自体にデプロイできないので不正解。
※サービス終了
https://qiita.com/miyuki_samitani/items/3daa4380822ea90129a1

Snowball Edge Storage Optimized
→オンプレミス環境からAWSへ最大80TBのデータ移行を1台で行えるデバイス
https://www.altius-link.com/recruit/its/blog/technology/20221202_001723.html
+データ転送+AWSでジョブを実行し続けたい
→AWSGlueで行うことがでできるので正解

EC2 コンピューティング機能を搭載しているSnowball Edge Storage Optimizedデバイス
新しくEC2インスタンスを作成して変換アプリの実施。

新しくEC2インスタンスを作成して変換アプリの実施がオーバーヘッドになるので不正解

155　請求書EC2コスト増加
　　いくつかのEC2インスタンスタイプ→意図しない垂直スケーリング
　　過去2ヶ月のEC2のコスト管理のグラフを作成→意図しない垂直スケーリングを特定し　　たい　オーバーヘッド最小限
　
AWS Budget →コストや使用量などの予算を設定できるサービス。
コスト・使用料をあらかじめ予測サービスなので過去にさかのぼる場合は別のサービスを使う必要ありなので不正解。
https://tenshoku-careerchange.jp/column/989/

Cost Explorer→どのサービスにコストがかかってるとか、誰がたくさん使ってるかというのをチェックできるサービス。
EC2ごとの使用状況がわかるのでこれが正解。
https://qiita.com/kobarasukimaro/items/58037588028653001595

AWS billing and cost management→請求書の支払い・使用料の監視・コスト・使用状況レポート・サービスの解約
ユーザの課金状況までは見れるが、EC2の使用状況まで見れない→不正解
https://qiita.com/jaken1207/items/482ba49b6f7d096f507d

コストと使用状況をS3→AmazonQuickSightでS3を分析
→オーバヘッドが発生するので不正解

AmazonQuickSight→AWSで簡単に分析環境を作ることができるBIサービス
https://www.sunnycloud.jp/column/20210930-01/

156　アプリ設計→データベース年間定義されたアクセスあり　
　　  時期により読み取り・書き込みが様々。→監査記録7日保管+普及は5h以内

　　AutoScalingのDynamoDB+オンデマンドバックアップでDynamoDB streamsを使用。
　　→DynamoDB→読み取り・書き込み同時スケーリング+監査記録を保持できるので正解
DynamoDB Streams →DynamoDB テーブル内の項目レベルの変更に関するシーケンスを時間順にキャプチャし、その情報を最大 24 時間ログに保存

　　RedShift→同時スケーリング→監査ログ→４H毎にスナップショット
　RedShift→AWS上で提供されているスケーラブルで高速、費用対効果が高くペタバイト規模のデータウェアハウスサービス
　https://www.sunnycloud.jp/column/20230630-01/
　
同時実行スケーリング機能→一貫した高速のクエリパフォーマンスで、数千の同時ユーザーと同時クエリをサポートできる

クエリを同時実行できるがそもそもデータ分析やBIツールとしての用途が一般的なので今回のアプリには適さない→不正解

　　プロビジョンドIOPSのRDSを使用→監査パラメータ有効→5H毎にスナップショット
　→読み込み書き込みの言及がないので不正解
　→ストレージデバイスが1秒間に処理できる入出力操作の回数
　
　AutoScalingのAmazonAuroraMySQLを使用。→監査パラメータ有効
→AmazonAuroraMySQLは書き込みスケーリングがサポートされてないので不正解　
→単一の書き込みエンドポイントしかサポートされてない

157　大量の本番データを復元したい　同じAWSリージョンのテスト環境
　　データ→AmazonEBSに保存されてる
　　データ変更で実環境に影響与えてはいけない　高いI/Oパフォーマンスが必要

IOPS（Input/Output Operations Per Second）パフォーマンス
IOPSは、1秒間に処理できるI/O操作の回数を示します。高いIOPSは、デバイスが多くのデータ操作を迅速に処理できることを意味します。

本番EBSボリュームのスナップショットを作成→テスト環境のインスタンスボリュームにスナップショットを復元。
高速スナップショット復元機能なしだと高いI/Oパフォーマンスが発揮できず、実環境に影響出る可能性あり→不正解

EBSマルチアタッチ機能使用→本番EBSボリュームを作成。このEBSボリュームからスナップショットを作成→テスト環境でEBSボリュームをEC2にアタッチ
改めて本番EBSボリュームを作る必要はないので不正解

本番EBSボリュームのスナップショットを作成→新しいEBSボリュームを作成、初期化→実稼働EBSスナップショットを復元前に→新しいEBSボリュームをテスト環境のEC2インスタンスにアタッチ
→初期化してしまうと、実環境に影響出る可能性ありなので不正解

本番EBSボリュームのスナップショットを作成→EBSスナップショットで、高速スナップショット復元機能をオン→スナップショットを新しいEBSボリュームに復元→テスト環境に新しいEBSボリュームを復元し、EC2にアタッチ
→正解

Amazon EBS→Amazon Elastic Block Store の略で、EC2インスタンスにアタッチして使われるAWSのストレージサービス

https://qiita.com/miyuki_samitani/items/20a1d74657668578180b

158　3層Webアプリケーション　WEBサーバ　パブリックサブネット
　　  アプリケーションサーバ&データベースサーバ　プライベートサブネット
仮想ファイアーウォールVPCにデプロイ　IPパケットを受信できるインターフェイスで構成
トラフィックがWEBサーバに到達する前にアプリケーションすべてのトラフィックを検査する必要あり。
→パブリックサブネット到達前に検査したい

ALB・NLBはVPCないのパブリックサブネット配置なので不正解

VPCゲートウェイロードバランサー
→VPC 内のアプリケーションへのトラフィックを管理するための特別なロードバランサ
https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/gateway/introduction.html

トランジットゲートウェイ
→仮想プライベートクラウド (VPC) とオンプレミスネットワークを相互接続するために使用できるネットワークの中継ハブ
https://docs.aws.amazon.com/ja_jp/vpc/latest/tgw/what-is-transit-gateway.html

159　画像処理アプリ　S3に画像アップロード&ダウンロード
　　  データ転送コスト増加したので、コストを減らしたい

前提:インターネット経由のデータ転送コストはお金がよりかかる

AmazonAPIGatewayのパブリックサブネット
→インターネットゲートウェイ経由なので不正解

NATGatewayのパブリックサブネット
→インターネットゲートウェイ経由なので不正解

アプリケーションをパプリックサブネットに配置→インターネットゲートウェイ経由
→インターネットゲートウェイ経由なので不正解

VPCゲートウェイエンドポイント
→S3への通信が無料になり通信量を抑えられるので正解

160　オンプレ環境に大規模なMicrosoft Share Point デプロイ→Microsoft 共有ファイルスト    レージ→クラウドに移動したい
可用性高い+ActiveDirectoryと共有できること

AmazonEFSストレージ→Linux向けのファイルサービスなので不正解。

2このAZないのAWS Storage Gateway 上にSMBファイルを共有。
サーバメッセージブロック（SMB）（英：Server Message Block）
→通信するときに使うお約束事（通信プロトコル）のひとつ
https://wa3.i-3-i.info/word16962.html
Amazon FSx GatewayならできるこれならSMBファイルの共有ができない

S3バケット作成&バケットにマウントできるようにMicrosoft Windows Serverを構成。
S3はオブジェクトなのでMicrosoft 共有ファイルストレージをマウントできない


Amazon FSx for Windows File Serverファイルシステムを作成→Active Directoryドメインを認証用に取得
Amazon FSx for Windows File Server→フルマネージドの Microsoft Windows ファイルサーバー
Active Directory（アクティブディレクトリ）
→Windowsのサーバさんに搭載されている、ネットワークにつながっているパソコンとかをまとめて管理するための仕組み

161　AWSにウェブサイト展開→HTTP&HTTPS通信別々に処理されるALBあり
　　すべてのリクエストをウェブサイトに転送し、リクエストがHTTPSを使用したい

HTTPSのトラフィック許可のみでネットワークACLを作成
→VPC内のサブネットのルーティングに適用できるものなので不正解

URLをHTTP→HTTPSにする
通信自体はHTTPSになるが、リダイレクトしないと反映されないので不正解。

リダイレクト（英：redirect）
→ホームページ関連の用語で、あるページから別のページに転送すること
https://wa3.i-3-i.info/word1482.html

ALBをNLBに置き換える
→NLBはTCPやUDPといったトランスポート層のプロトコルに対応するので不正解

ALBのリスナーをHTTPSに変える
→リダイレクトするリスナールールを作成する。。http://tukkun/app/info
が来たら、https://tukkun/app/info.に転送するというルールになる。
→正解

162　米国のオンプレで動的ウェブサイトをホスト→ヨーロッパの新規ユーザのためにサイ　　  トの読み込み時間を最適化したい→サイトのバックエンドは米国に残したい
　　　すぐソリューションが必要

　　us-east-1にEC2を起動→サイトを移動
　→ヨーロッパからの読み込みに時間かかりレイテンシーが大きくなってしまうので不正解

　ウェブサイトをS3に移動する+クロスリージョン→S3は静的サイトのサポートが主なので、動的サイトなら大幅な変更必要→不正解

Route53地理的近接ルーティングポリシー
→リソースのトラフィックを地理的場所に応じて最適化するが、オンプレサーバが米国にあるのでレイテンシーが大きくなってしまうので不正解。

https://qiita.com/Yona_Sou/items/cbd5f33817578434367f

レイテンシ（英：latency）→「始めるよ！」から「終わるよ！」までにかかる時間
https://wa3.i-3-i.info/word111153.html

オンプレをオリジンとしてcloudfrontを使用
CDNサービス　コンテンツデリバリーネットワークサービス
ホームページのファイルをいろんなコンピュータに置いて、ホームページを見る人は自分の近くのコンピュータからファイルを受け取ることで、ホームページの表示が速くなったり、たくさんの人が同時に見ても遅くならないようにしてくれるネットワークのこと
https://wa3.i-3-i.info/word16730.html

163　AWS上にサーバレス技術を利用したデータ処理システム
　　Lambda関数の最小権限の原則に基づいてAmazonEventBridgeのルールによって呼び　　   出される IAMポリシー&ロールの問題

プリンシパル→AmazonEventBridgeのルールから実行されるように
service:event.amazonaws.comからアクセスくるように
lambda.amazonaws.comならEventBridgeからlambdaｈｗのアクセスになる
今回はlambda関数にアタッチするので不正解
アクション→lambda:InvokeFunction　は不正解

*→すべての実行アクション・実行リソースを意味しているので最小権限の原則に反する

https://docs.aws.amazon.com/ja_jp/eventbridge/latest/userguide/eb-use-resource-based.html#eb-lambda-permissions
https://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/reference_policies_elements_principal.html

164　AWS上にアプリデプロイ70万人ユーザ登録　.pdf→.jpgに変換する製品を作成
        .jpgは平均５MB　オリジナル+変換後もデータ保存される必要あり
　　急速に増える需要応える→スケーラブルなソリューション 　費用対効果最も高いもの

　　S3→lambda　最も安い
　　DynamoDB→S3の10倍のお金
　　EBS+ElasticBeamstalk　EC2+EBS　S3に比べて料金が高い
　　EFS+ElasticBeamstalk　EC2+EFS　S3に比べて料金が高い

ElasticBeamstalk
→アプリケーションが動作するインフラ環境のデプロイを自動化するサービス

165　複数AZのEC2インスタンス　ALBの背後のEC2 Auto Scaling 
　　  CPU使用率40%近くで最も高パフォーマンス
        すべてのインスタンスで望ましいパフォーマンス

シンプルスケーリングポリシー→テップスケーリングポリシーと簡易スケーリングポリシーは、 CloudWatch アラームに基づいて Auto Scaling グループの容量を事前に定義された増分でスケーリング
https://docs.aws.amazon.com/ja_jp/autoscaling/ec2/userguide/as-scaling-simple-step.html
1台のインスタンスにしか適用できないので不正解。

ターゲット追跡スケーリングポリシー→ターゲットメトリクス値に基づいて Auto Scaling グループの容量を自動的にスケーリング
今回ならCPU使用率40％に設定すればいいので正解
https://docs.aws.amazon.com/ja_jp/autoscaling/ec2/userguide/as-scaling-target-tracking.html
Lambda関数でキャパシティを更新する
→すべてのインスタンスで望ましいパフォーマンスを維持はできないので不正解

スケジュールされたスケーリングアクション
日付や時刻に応じて自動的にスケーリングさせること
→すべてのインスタンスで望ましいパフォーマンスを維持はできないので不正解

https://docs.aws.amazon.com/ja_jp/autoscaling/ec2/userguide/ec2-auto-scaling-scheduled-scaling.html


166　キューの重複を解決できるAPIどれ
Create Queue API →新しいキューにメッセージが追加→新しいキュー対して処理
→不正解
AddPermissionAPI
→APIがSQSを使える・使えないのみの設定しかできないので不正解
RecieveMessageAPI
→SQSからメッセージを受け取るAPI　受取に取り合いが発生し、1回のみの受取設定できないのでNG。

Change Message Visibility API=Amazon SQS可視性タイムアウト
可視性タイムアウトとは、 SQS のキューに入ったメッセージが処理開始直後に重複して処理されないように、処理中の場合、一時的に他のプロセスからは、メッセージが存在していることを見えないようにする設定。
→同じメッセージを処理しない設定にできるので、正解
https://dev.classmethod.jp/articles/sqs-visibility-timeout/

167 IGW+パブリックサブネット→プライベートサブネットにあるEC2がソフトウェアアップデートできるようにしたい

プライベートサブネットのインターネットアクセスを有効にしたい

NATゲートウェイ→正解。
NATインスタンス→インスタンス配置だけではアクセス可能にならないのでNG。
プライベートサブネットにIGW→VPCにアタッチされていないのでNG。
プライベートサブネットにEgressOnlyのIGW→送信はできるが受信できないのでNG
IPv6のアドレスの明記もないので不正解。
https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/egress-only-internet-gateway.html

168　DynamoDBテーブル→コスト最適化したい　デーブル→朝はほぼ使用なし
　　夕方の読み込み・書き込みは予測不可。トラフィックのスパイクは短時間で起こる


オンデマンドモード→キャパシティを確保しないので、書き込み・読み込みリクエスト単位で請求が発生します。
プロビジョンドモード→割り当てたキャパシティに対して時間課金が発生します。
→予測されない用途には使用不可
https://blog.serverworks.co.jp/DynamoDB-Capacity_Mode

グローバルセカンダリインデックス（GSI: Global Secondary Index）
→Amazon DynamoDBのテーブルに対して追加のインデックスを作成し、異なるクエリパターンをサポートするための機能
→元のテーブルのプライマリキーとは異なるキーを基にしたクエリを実行したい場合に使用。
→例えば、ユーザーのテーブルがユーザーIDをプライマリキーとしている場合、GSIを使用することで、メールアドレスや登録日など他の属性を基にクエリを実行。
→データの算出の効率を上げることができるがコスト最適化には関係ないので不正解


169　アプリ稼働→S3に画像アップロード
　　Json形式に保存して1回だけ処理したい→できるだけ迅速に処理
　　ファイル数日によって変更→アップロード量は予測できない
　　最小限のオーバーヘッド

1回だけ処理したい→SQSを使用　Lambdaで起動する→正解
SQS+EC2 ならEC2で稼働するようにアプリを作らないといけない
→最小限のオーバーヘッドに反する
　
Amazon Kinesis Data Streams (KDS) は、リアルタイムで大量のデータを収集し、処理、分析するためのAWSサービス
→Eventbridge+lambda+auroraDB →クラスターボリュームが128TiBの制限あり

S3→EMR→処理スクリプト実行しデータ変換→JsonファイルをAmazonAuroraDBに保存
Amazon EMR→Apache HadoopやApache Sparkなどのオープンソースツールを利用した、ビッグデータの分析が可能なAWSのサービス
https://www.skyarch.net/column/amazon-emr/
Auroraのクラスターボリュームが128TiBの制限あり

170　サイト運営→RDS保存　
　　   販売時→リスト削除→ターゲットシステムにデータ保存する必要あり
        RDSのイベント通知をサブスクライブか更新されたときに起動されるLambda関数を起動どっちか

イベント通知にサブスクライブなら管理者が販売の度に手動でLambda関数を実行しなければならない
更新されたときに起動されるLambda関数を起動どっちか
→管理者の介入なしで自動的にリスト削除→ターゲットシステムにデータ保存できる

FIFOキューまでは今回はする必要なし→不正解　なので情報を送信してメッセージを送信するでOK
